import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
        jacksonVersion = '2.8.10'
        feignVersion = '9.5.1'
        swaggerVersion = '1.5.18'
        apacheCommonsVersion = '3.5'
    }
    repositories {
        jcenter()
    }
}
plugins {
    id 'nebula.project' version '3.4.0'
    id 'nebula.info' version '3.6.0'
    id 'nebula.release' version '6.0.0'
    id 'nebula.lint' version '6.8.0'
    id 'findbugs'
    id 'checkstyle'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'io.franzbecker.gradle-lombok' version '1.8'
    id 'com.github.ben-manes.versions' version '0.14.0'
}

contacts {
    'devlopment@amv-networks.com' {
        moniker 'AMV Networks GmbH'
        role 'owner'
        github 'amvnetworks'
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'java'

    repositories {
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-milestone' }
        jcenter()
        mavenLocal()
    }

    group = 'org.amv.trafficsoft'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations.all {
        resolutionStrategy {
            preferProjectModules()
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()

            force 'com.netflix.archaius:archaius-core:0.6.6',
                    'org.slf4j:slf4j-api:1.7.25',
                    'com.google.guava:guava:22.0',
                    'org.reactivestreams:reactive-streams:1.0.1',
                    "io.github.openfeign:feign-core:${feignVersion}",
                    "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                    "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                    "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",
                    "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}",
                    'commons-logging:commons-logging:1.2',
                    'org.hamcrest:hamcrest-core:1.3'
        }
    }
}

subprojects {
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.lint'
    apply plugin: 'nebula.project'
    apply plugin: 'nebula.info'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'io.franzbecker.gradle-lombok'

    dependencies {
        compile 'com.google.guava:guava:22.0'
        compileOnly 'org.projectlombok:lombok:1.16.16'

        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'pl.pragmatists:JUnitParams:1.0.6'
        testCompile "org.apache.commons:commons-lang3:${apacheCommonsVersion}"
    }

    gradle.taskGraph.whenReady { graph ->
        def isMinimalBuild = project.hasProperty("minimal")

        def enableAdditionalLongRunningTasks = !isMinimalBuild

        if (!enableAdditionalLongRunningTasks) {
            findbugsMain.enabled = false
            checkstyleMain.enabled = false
            javadoc.enabled = false
        }
    }

    lombok {
        version = '1.16.16'
        sha256 = 'fbf682c7ff113e5187a9c4b4cbd7a8ad782abd8ccff91b9fa7289a4a6aa8c19a'
    }

    task delombok(type: DelombokTask, dependsOn: compileJava) {
        ext.outputDir = file("$buildDir/delombok")
        outputs.dir(outputDir)
        sourceSets.main.java.srcDirs.each {
            inputs.dir(it)
            args(it, '-d', outputDir)
        }
    }

    task delombokHelp(type: DelombokTask) {
        args '--help'
    }

    javadoc {
        dependsOn delombok
        source = delombok.outputDir
        exclude 'lombok.config'
        failOnError = false
        options.noTimestamp = true
        title = "${project.name}"
    }

    task copyJavadoc(type: Copy) {
        from javadoc
        into rootProject.file("docs/${project.name}/javadoc/")
    }

    build.dependsOn copyJavadoc

    clean.doLast {
        rootProject.file("docs/${project.name}/javadoc/").deleteDir()
    }

    jar.doFirst {
        // other manifest attributes will be populated by nebula.info plugin
        // see https://github.com/nebula-plugins/gradle-info-plugin
        def vendor = 'AMV Networks GmbH'
        manifest {
            attributes(
                    'Specification-Title': project.description,
                    'Specification-Version': project.version,
                    'Specification-Vendor': vendor,
                    'Implementation-Vendor': vendor
            )
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        toolVersion = '6.7'
        ignoreFailures = true
        showViolations = false
        sourceSets = [sourceSets.main]
        reportsDir = rootProject.file("$buildDir/reports/checkstyle")
    }

    findbugs {
        effort = 'min'
        ignoreFailures = true
        sourceSets = [sourceSets.main]
    }

    task subprojectsDependencies(type: DependencyReportTask) {

    }

    test {
        // Generate code coverage reports ... run with jacoco
        jacocoTestReport {
            additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
            reports {
                xml.enabled true
                csv.enabled false
                html.destination file("${buildDir}/reports/jacoco/html")
            }
            executionData = files("${buildDir}/jacoco/test.exec")
        }

        // * enable on demand
        // testLogging.showStandardStreams = true
        finalizedBy jacocoTestReport
    }

    if (project.hasProperty('releaseToBintray')) {
        if (rootProject.version.toString().contains('SNAPSHOT')) {
            throw new GradleException('-PreleaseToBintray param cannot be used with SNAPSHOT versions')
        }

        bintray {
            user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
            key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
            configurations = ['archives']
            pkg {
                repo = 'amv-trafficsoft-rest'
                name = project.name
                userOrg = user
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/amvnetworks/amv-trafficsoft-rest.git'
                labels = ['amv', 'trafficsoft']
                publicDownloadNumbers = false
                version {
                    name = rootProject.version
                    desc = project.description
                    vcsTag = rootProject.version
                }
            }
        }
    }
}
